# -*- coding: utf-8 -*-
"""qcRefiningRecommendations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vu8556gG3uuAnWgkSHJjML4V-XVEah_x
"""

import pandas as pd
import csv
qc_res = pd.read_csv("qc_results.csv")

qc_res.head()

# control question numbers
qc_res["Answer.Q5ControlAnswer"].value_counts()

# count before control check
res_count = qc_res.shape[0]
print(res_count)

# remove rows with rejected workers
indexNames1 = qc_res[ qc_res['WorkerId'] == "A1NSS58MHS3QXY" ].index
qc_res.drop(indexNames1 , inplace=True)
indexNames2 = qc_res[ qc_res['WorkerId'] == "A3J5K2E5RS1P2P" ].index
qc_res.drop(indexNames2 , inplace=True)
indexNames33 = qc_res[ qc_res['WorkerId'] == "A2717S28QHY09K" ].index
qc_res.drop(indexNames3 , inplace=True)

res_count = qc_res.shape[0]
print(res_count)

# remove rows with wrongly answered control question
qc_res = qc_res[qc_res['Answer.Q5ControlAnswer'] == "No_NegControl"]

# count after removing wrongly answered control questions
res_count = qc_res.shape[0]
print(res_count)

location_types = qc_res[['Input.location', 'Input.location_type', 'Answer.Q2Answer']]

location_types.head(15)

# make Input.location_type string same as Answer.Q2Answer (e.g. food place -> food) to allow for comparison
location_types.loc[(location_types['Input.location_type'] == 'cultural site'),'Input.location_type']='cultural'
location_types.loc[(location_types['Input.location_type'] == 'food place'),'Input.location_type']='food'
location_types.loc[(location_types['Input.location_type'] == 'historical landmark'),'Input.location_type']='historical'
location_types.loc[(location_types['Input.location_type'] == 'nature'),'Input.location_type']='natural'
location_types.loc[(location_types['Input.location_type'] == 'speciality store'),'Input.location_type']='store'

d = {'Locations': [], 'given_type': [], 'natural': [], 'food': [], 'waterfront': [], 'entertainment': [], 'cultural': [], 'museum': [],
     'historical': [], 'store': [], 'other': []}
labels = pd.DataFrame(data=d)

labels.Locations = location_types['Input.location'].copy()
labels['given_type'] = location_types['Input.location_type'].copy()
labels.head()

labels = labels.drop_duplicates().reset_index(drop=True).fillna(0)

def update_label_count(x) :
  labels.loc[labels.Locations == x, "natural"] = len(
    location_types[(location_types['Input.location'] == x) & (location_types['Answer.Q2Answer'] == "natural")])
  
  labels.loc[labels.Locations == x, "food"] = len(
    location_types[(location_types['Input.location'] == x) & (location_types['Answer.Q2Answer'] == "food")])
  
  labels.loc[labels.Locations == x, "waterfront"] = len(
    location_types[(location_types['Input.location'] == x) & (location_types['Answer.Q2Answer'] == "waterfront")])
  
  labels.loc[labels.Locations == x, "entertainment"] = len(
    location_types[(location_types['Input.location'] == x) & (location_types['Answer.Q2Answer'] == "entertainment")])
  
  labels.loc[labels.Locations == x, "cultural"] = len(
    location_types[(location_types['Input.location'] == x) & (location_types['Answer.Q2Answer'] == "cultural")])
  
  labels.loc[labels.Locations == x, "museum"] = len(
    location_types[(location_types['Input.location'] == x) & (location_types['Answer.Q2Answer'] == "museum")])
  
  labels.loc[labels.Locations == x, "historical"] = len(
    location_types[(location_types['Input.location'] == x) & (location_types['Answer.Q2Answer'] == "historical")])
  
  labels.loc[labels.Locations == x, "store"] = len(
    location_types[(location_types['Input.location'] == x) & (location_types['Answer.Q2Answer'] == "store")])
  
  labels.loc[labels.Locations == x, "other"] = len(
    location_types[(location_types['Input.location'] == x) & (location_types['Answer.Q2Answer'] == "other")])

def update_for_og_label(x) : 
  labels.loc[labels.Locations == x, "natural"] += len(
    labels[(labels['Locations'] == x) & (labels['given_type'] == "natural")])
  
  labels.loc[labels.Locations == x, "food"] += len(
    labels[(labels['Locations'] == x) & (labels['given_type'] == "food")])
  
  labels.loc[labels.Locations == x, "waterfront"] += len(
    labels[(labels['Locations'] == x) & (labels['given_type'] == "waterfront")])
  
  labels.loc[labels.Locations == x, "entertainment"] += len(
    labels[(labels['Locations'] == x) & (labels['given_type'] == "entertainment")])
  
  labels.loc[labels.Locations == x, "cultural"] += len(
    labels[(labels['Locations'] == x) & (labels['given_type'] == "cultural")])
  
  labels.loc[labels.Locations == x, "museum"] += len(
    labels[(labels['Locations'] == x) & (labels['given_type'] == "museum")])
  
  labels.loc[labels.Locations == x, "historical"] += len(
    labels[(labels['Locations'] == x) & (labels['given_type'] == "historical")])
  
  labels.loc[labels.Locations == x, "store"] += len(
    labels[(labels['Locations'] == x) & (labels['given_type'] == "store")])
  
  labels.loc[labels.Locations == x, "other"] += len(
    labels[(labels['Locations'] == x) & (labels['given_type'] == "other")])

labels['Locations'].apply(lambda x: update_label_count(x))
labels['Locations'].apply(lambda x: update_for_og_label(x))

labels.head()

labels['correct_type'] = labels.eq(labels.max(1), axis=0).dot(labels.columns)

labels.head()

titles = {'Location': [], 'Correct_Type': []}
final_df = pd.DataFrame(data=titles)
final_df.Location = labels['Locations'].copy()
final_df.Correct_Type = labels['correct_type'].copy()
final_df.head()